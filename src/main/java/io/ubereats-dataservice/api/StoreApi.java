/**
 * NOTE: This class is auto generated by the swagger code generator program (2.3.1).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import java.util.Map;
import io.swagger.model.Restaurant;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import javax.validation.Valid;
import javax.validation.constraints.*;

@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2018-08-01T20:29:30.132Z")

@Api(value = "store", description = "the store API")
public interface StoreApi {

    @ApiOperation(value = "Add a new restaurant", nickname = "addrestaurant", notes = "", tags={ "store", })
    @ApiResponses(value = { 
        @ApiResponse(code = 405, message = "Invalid input") })
    @RequestMapping(value = "/store",
        produces = { "application/xml", "application/json" }, 
        consumes = { "application/json", "application/xml" },
        method = RequestMethod.POST)
    ResponseEntity<Void> addrestaurant(@ApiParam(value = "Restaurant object that needs to be added" ,required=true )  @Valid @RequestBody Restaurant body);


    @ApiOperation(value = "delete an existing restaurant", nickname = "deleteRestaurant", notes = "", tags={ "store", })
    @ApiResponses(value = { 
        @ApiResponse(code = 400, message = "Invalid ID supplied"),
        @ApiResponse(code = 404, message = "Restaurant not found"),
        @ApiResponse(code = 405, message = "Validation exception") })
    @RequestMapping(value = "/store",
        produces = { "application/xml", "application/json" }, 
        consumes = { "application/json", "application/xml" },
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteRestaurant(@ApiParam(value = "Restaurant object that needs to be deleted" ,required=true )  @Valid @RequestBody Restaurant body);


    @ApiOperation(value = "Returns restaurant details", nickname = "getRestaurant", notes = "Returns restaurant details", response = Integer.class, responseContainer = "Map", authorizations = {
        @Authorization(value = "api_key")
    }, tags={ "store", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Map.class, responseContainer = "Map") })
    @RequestMapping(value = "/store",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Map<String, Integer>> getRestaurant();


    @ApiOperation(value = "Returns restaurant details matching category", nickname = "getRestaurantWithCategory", notes = "Returns restaurant details matching category", response = Integer.class, responseContainer = "Map", authorizations = {
        @Authorization(value = "api_key")
    }, tags={ "store", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Map.class, responseContainer = "Map"),
        @ApiResponse(code = 400, message = "Invalid categoryId supplied") })
    @RequestMapping(value = "/store/findbycategory",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Map<String, Integer>> getRestaurantWithCategory(@ApiParam(value = "CategoryId",required=true) @PathVariable("categoryId") Long categoryId);


    @ApiOperation(value = "Returns restaurant details matching location", nickname = "getRestaurantWithlocation", notes = "Returns restaurant details matching location", response = Integer.class, responseContainer = "Map", authorizations = {
        @Authorization(value = "api_key")
    }, tags={ "store", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Map.class, responseContainer = "Map"),
        @ApiResponse(code = 400, message = "Invalid filter location supplied") })
    @RequestMapping(value = "/store/findbylocation",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Map<String, Integer>> getRestaurantWithlocation(@NotNull @ApiParam(value = "filterByLocation", required = true) @Valid @RequestParam(value = "filterByLocation", required = true) String filterByLocation);


    @ApiOperation(value = "Update an existing restaurant", nickname = "updateRestaurant", notes = "", tags={ "store", })
    @ApiResponses(value = { 
        @ApiResponse(code = 400, message = "Invalid ID supplied"),
        @ApiResponse(code = 404, message = "Restaurant not found"),
        @ApiResponse(code = 405, message = "Validation exception") })
    @RequestMapping(value = "/store",
        produces = { "application/xml", "application/json" }, 
        consumes = { "application/json", "application/xml" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> updateRestaurant(@ApiParam(value = "Restaurant object that needs to be added" ,required=true )  @Valid @RequestBody Restaurant body);

}
