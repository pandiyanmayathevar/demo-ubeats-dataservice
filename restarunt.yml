swagger: "2.0"
info:
  description: "This is a Uber-Eats assignment"
  version: "1.0.0"
  title: "Uber-Eats"
  termsOfService: ""
basePath: "/v2"
schemes:
- "http"
paths:
  /order:
    post:
      tags:
      - "order"
      summary: "Add a new order"
      description: ""
      operationId: "addorder"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "order object that needs to be added"
        required: true
        schema:
          $ref: "#/definitions/Order"
      responses:
        405:
          description: "Invalid input"
  /category:
    post:
      tags:
      - "category"
      summary: "Add a new category"
      description: ""
      operationId: "addcategory"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "category object that needs to be added"
        required: true
        schema:
          $ref: "#/definitions/Category"
      responses:
        405:
          description: "Invalid input"
    put:
      tags:
      - "category"
      summary: "Update an existing category"
      description: ""
      operationId: "updatecategory"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Category object that needs to be added"
        required: true
        schema:
          $ref: "#/definitions/Category"
      responses:
        400:
          description: "Invalid ID supplied"
        404:
          description: "Category not found"
        405:
          description: "Validation exception"
    delete:
      tags:
      - "category"
      summary: "delete an existing category"
      description: ""
      operationId: "deletecategory"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "category object that needs to be deleted"
        required: true
        schema:
          $ref: "#/definitions/Category"
      responses:
        400:
          description: "Invalid ID supplied"
        404:
          description: "Category not found"
        405:
          description: "Validation exception"          
  /store:
    post:
      tags:
      - "store"
      summary: "Add a new restaurant"
      description: ""
      operationId: "addrestaurant"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Restaurant object that needs to be added"
        required: true
        schema:
          $ref: "#/definitions/Restaurant"
      responses:
        405:
          description: "Invalid input"
    put:
      tags:
      - "store"
      summary: "Update an existing restaurant"
      description: ""
      operationId: "updateRestaurant"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Restaurant object that needs to be added"
        required: true
        schema:
          $ref: "#/definitions/Restaurant"
      responses:
        400:
          description: "Invalid ID supplied"
        404:
          description: "Restaurant not found"
        405:
          description: "Validation exception"
    delete:
      tags:
      - "store"
      summary: "delete an existing restaurant"
      description: ""
      operationId: "deleteRestaurant"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Restaurant object that needs to be deleted"
        required: true
        schema:
          $ref: "#/definitions/Restaurant"
      responses:
        400:
          description: "Invalid ID supplied"
        404:
          description: "Restaurant not found"
        405:
          description: "Validation exception"          
    get:
      tags:
      - "store"
      summary: "Returns restaurant details"
      description: "Returns restaurant details"
      operationId: "getRestaurant"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            type: "object"
            additionalProperties:
              type: "integer"
              format: "int32"
      security:
      - api_key: []
  /store/findbylocation:      
    get:
      tags:
      - "store"
      summary: "Returns restaurant details matching location"
      description: "Returns restaurant details matching location"
      operationId: "getRestaurantWithlocation"
      produces:
      - "application/json"
      parameters:
      - name: "filterByLocation"
        in: "query"
        description: "filterByLocation"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "object"
            additionalProperties:
              type: "integer"
              format: "int32"
        400:
          description: "Invalid filter location supplied"              
      security:
      - api_key: []        
  /store/findbycategory:
    get:
      tags:
      - "store"
      summary: "Returns restaurant details matching category"
      description: "Returns restaurant details matching category"
      operationId: "getRestaurantWithCategory"
      produces:
      - "application/json"
      parameters:
      - name: "categoryId"
        in: "path"
        description: "CategoryId"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "object"
            additionalProperties:
              type: "integer"
              format: "int32"
        400:
          description: "Invalid categoryId supplied"              
      security:
      - api_key: []  
securityDefinitions:
  petstore_auth:
    type: "oauth2"
    authorizationUrl: "http://petstore.swagger.io/oauth/dialog"
    flow: "implicit"
    scopes:
      write:pets: "modify pets in your account"
      read:pets: "read your pets"
  api_key:
    type: "apiKey"
    name: "api_key"
    in: "header"
definitions:
  Restaurant:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
      categoryId:
        type: "integer"
        format: "int64"
      streetNameNumber:
        type: "string"
      postalCode:
        type: "string"
      city:
        type: "string"
      province:
        type: "string"     
    xml:
      name: "Restaurant"
  Dishes:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
      price:
        type: "number"
      RestaurantId:
        type: "integer"
    xml:
      name: "Dishes"
  Category:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      categoryName:
        type: "string"
    xml:
      name: "Categories"      
  Customer:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
      billingDetailId:
        type: "integer"
        format: "int64"
      streetNameNumber:
        type: "string"
      postalCode:
        type: "string"
      city:
        type: "string"
      province:
        type: "string"     
    xml:
      name: "Customer"      
  Order:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      dishId:
        type: "integer"
        format: "int64"
      customerId:
        type: "integer"
        format: "int64"
      processingTimestamp:
        type: "string"
        format: "date-time"
    xml:
      name: "Order"
  BillingDetails:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      creditCardNumber:
        type: "string"      
    xml:
      name: "BillingDetails"  
  Notifications:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      recipientId:
        type: "integer"
        format: "int64"
      sentTimestamp:
        type: "string"
        format: "date-time"
    xml:
      name: "Notifications"  
